{"mappings":"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","sources":["dom.js"],"sourcesContent":["window.dom = {\r\n    // 命名空间风格;创建函数\r\n    create(string) {\r\n        // 用于创建节点\r\n        // container 相当于div\r\n        const container = document.createElement('template')\r\n        // const类似于let container变量  document.createElement创建一个由标签名称 templatexx 指定的 HTML 元素\r\n        // template 内容模板元素：可以容纳任何元素\r\n        container.innerHTML = string.trim();\r\n        // trim() 方法从字符串的两端清除空格，返回一个新的字符串，而不修改原始字符串。\r\n        return container.content.firstChild;\r\n    },\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n        // 用于在增加节点\r\n    },\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    append(parent, node) {\r\n        parent.appendChild(node)\r\n    },\r\n    wrap(node, parent) {\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)\r\n    },\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    }, // 删除节点\r\n    empty(node) {\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },  // 删除后代\r\n\r\n    attr(node, name, value) { // 重载\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n\r\n    text(node, string) { // 适配\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                node.innerText = string\r\n            } else {\r\n                node.textContent = string\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText\r\n            } else {\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n\r\n    html(node, string) {    // 用于读写属性\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div, 'color', 'red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div, 'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                // dom.style(div, {color: 'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n\r\n\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },   // 用于监听\r\n\r\n    // 以下用于查\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"version":3,"file":"index.8067b1f7.js.map","sourceRoot":"/__parcel_source_root/"}